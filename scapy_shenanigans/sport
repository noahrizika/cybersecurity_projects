Help on TCP in module scapy.layers.inet object:

class TTCCPP(scapy.packet.Packet)
 |  TCP(
 |      _pkt,
 |      /,
 |      *,
 |      sport=20,
 |      dport=80,
 |      seq=0,
 |      ack=0,
 |      dataofs=None,
 |      reserved=0,
 |      flags=<Flag 2 (S)>,
 |      window=8192,
 |      chksum=None,
 |      urgptr=0,
 |      options=b''
 |  )
 |
 |  Method resolution order:
 |      TCP
 |      scapy.packet.Packet
 |      scapy.base_classes.BasePacket
 |      scapy.base_classes.Gen
 |      typing.Generic
 |      scapy.base_classes._CanvasDumpExtended
 |      builtins.object
 |
 |  Methods defined here:
 |
 |  aannsswweerrss(self, other)
 |      DEV: true if self is an answer from other
 |
 |  hhaasshhrreett(self)
 |      DEV: returns a string that has the same value for a request
 |      and its answer.
 |
 |  mmyyssuummmmaarryy(self)
 |      DEV: can be overloaded to return a string that summarizes the layer.
 |      Only one mysummary() is used in a whole packet summary: the one of the upper layer,  # noqa: E501
 |      except if a mysummary() also returns (as a couple) a list of layers whose  # noqa: E501
 |      mysummary() must be called if they are present.
 |
 |  ppoosstt__bbuuiilldd(self, p, pay)
 |      DEV: called right after the current layer is build.
 |
 |      :param str pkt: the current packet (build by self_build function)
 |      :param str pay: the packet payload (build by do_build_payload function)
 |      :return: a string of the packet with the payload
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes defined here:
 |
 |  ____aallll__sslloottss____ = {'_answered', '_pkt', 'comment', 'default_fields', 'di...
 |
 |  ____ppaarraammeetteerrss____ = ()
 |
 |  ____ssiiggnnaattuurree____ = <Signature (_pkt, /, *, sport=20, dport=80, seq=...win...
 |
 |  aalliiaassttyyppeess = [<class 'scapy.layers.inet.TCP'>, <class 'scapy.packet.Pa...
 |
 |  ffiieellddss__ddeesscc = [<ShortEnumField (TCP,TCPerror).sport>, <ShortEnumField ...
 |
 |  ppaayyllooaadd__gguueessss = [({'dport': 53}, <class 'scapy.layers.dns.DNS'>), ({'s...
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from scapy.packet.Packet:
 |
 |  ____bbooooll____ = __nonzero__(self)
 |
 |  ____bbyytteess____(self)
 |
 |  ____ccoonnttaaiinnss____(self, cls)
 |      "cls in self" returns true if self has a layer which is an
 |      instance of cls.
 |
 |  ____ddeeeeppccooppyy____(self, memo)
 |      Used by copy.deepcopy
 |
 |  ____ddeellaattttrr____(self, attr)
 |      Implement delattr(self, name).
 |
 |  ____ddeelliitteemm____(self, cls)
 |
 |  ____ddiirr____(self)
 |      Add fields to tab completion list.
 |
 |  ____ddiivv____(self, other)
 |
 |  ____eeqq____(self, other)
 |      Return self==value.
 |
 |  ____ggeettaattttrr____(self, attr)
 |
 |  ____ggeettiitteemm____(self, cls)
 |
 |  ____ggtt____(self, other)
 |      True if other is an answer from self (self ==> other).
 |
 |  ____iinniitt____(
 |      self,
 |      _pkt=b'',
 |      post_transform=None,
 |      _internal=0,
 |      _underlayer=None,
 |      _parent=None,
 |      stop_dissection_after=None,
 |      **fields
 |  )
 |      Initialize self.  See help(type(self)) for accurate signature.
 |
 |  ____iitteerr____(self)
 |      Iterates through all sub-packets generated by this Packet.
 |
 |  ____lleenn____(self)
 |
 |  ____lltt____(self, other)
 |      True if self is an answer from other (other ==> self).
 |
 |  ____mmuull____(self, other)
 |
 |  ____nnee____(self, other)
 |      Return self!=value.
 |
 |  ____nnoonnzzeerroo____(self)
 |
 |  ____rrddiivv____(self, other)
 |
 |  ____rreedduuccee____(self)
 |      Used by pickling methods
 |
 |  ____rreepprr____(self)
 |      Return repr(self).
 |
 |  ____rrmmuull____(self, other)
 |
 |  ____rrttrruueeddiivv____ = __rdiv__(self, other)
 |
 |  ____sseettaattttrr____(self, attr, val)
 |      Implement setattr(self, name, value).
 |
 |  ____sseettiitteemm____(self, cls, val)
 |
 |  ____sseettssttaattee____(self, state)
 |      Rebuild state using pickable methods
 |
 |  ____ssttrr____(self)
 |      Return str(self).
 |
 |  ____ttrruueeddiivv____ = __div__(self, other)
 |
 |  aadddd__ppaarreenntt(self, parent)
 |      Set packet parent.
 |      When packet is an element in PacketListField, parent field would
 |      point to the list owner packet.
 |
 |  aadddd__ppaayyllooaadd(self, payload)
 |
 |  aadddd__uunnddeerrllaayyeerr(self, underlayer)
 |
 |  bbuuiilldd(self)
 |      Create the current layer
 |
 |      :return: string of the packet with the payload
 |
 |  bbuuiilldd__ddoonnee(self, p)
 |
 |  bbuuiilldd__ppaaddddiinngg(self)
 |
 |  bbuuiilldd__ppss(self, internal=0)
 |
 |  ccaannvvaass__dduummpp(self, layer_shift=0, rebuild=1)
 |
 |  cclleeaarr__ccaacchhee(self)
 |      Clear the raw packet cache for the field and all its subfields
 |
 |  cclloonnee__wwiitthh(self, payload=None, **kargs)
 |
 |  ccoommmmaanndd(self)
 |      Returns a string representing the command you have to type to
 |      obtain the same packet
 |
 |  ccooppyy(self) -> Self
 |      Returns a deep copy of the instance.
 |
 |  ccooppyy__ffiieelldd__vvaalluuee(self, fieldname, value)
 |
 |  ccooppyy__ffiieellddss__ddiicctt(self, fields)
 |
 |  ddeeccooddee__ppaayyllooaadd__aass(self, cls)
 |      Reassembles the payload and decode it using another packet class
 |
 |  ddeeffaauulltt__ppaayyllooaadd__ccllaassss(self, payload)
 |      DEV: Returns the default payload class if nothing has been found by the
 |      guess_payload_class() method.
 |
 |      :param str payload: the layer's payload
 |      :return: the default payload class define inside the configuration file
 |
 |  ddeellffiieellddvvaall(self, attr)
 |
 |  ddiissppllaayy(self, *args, **kargs)
 |      Deprecated. Use show() method.
 |
 |  ddiisssseecctt(self, s)
 |
 |  ddiisssseeccttiioonn__ddoonnee(self, pkt)
 |      DEV: will be called after a dissection is completed
 |
 |  ddoo__bbuuiilldd(self)
 |      Create the default version of the layer
 |
 |      :return: a string of the packet with the payload
 |
 |  ddoo__bbuuiilldd__ppaayyllooaadd(self)
 |      Create the default version of the payload layer
 |
 |      :return: a string of payload layer
 |
 |  ddoo__bbuuiilldd__ppss(self)
 |
 |  ddoo__ddiisssseecctt(self, s)
 |
 |  ddoo__ddiisssseecctt__ppaayyllooaadd(self, s)
 |      Perform the dissection of the layer's payload
 |
 |      :param str s: the raw layer
 |
 |  ddoo__iinniitt__ccaacchheedd__ffiieellddss(self, for_dissect_only=False)
 |      Initialize each fields of the fields_desc dict, or use the cached
 |      fields information
 |
 |  ddoo__iinniitt__ffiieellddss(self, flist)
 |      Initialize each fields of the fields_desc dict
 |
 |  eexxttrraacctt__ppaaddddiinngg(self, s)
 |      DEV: to be overloaded to extract current layer's padding.
 |
 |      :param str s: the current layer
 |      :return: a couple of strings (actual layer, padding)
 |
 |  ffiirrssttllaayyeerr(self)
 |
 |  ffrraaggmmeenntt(self, *args, **kargs)
 |
 |  ggeett__ffiieelldd(self, fld)
 |      DEV: returns the field instance from the name of the field
 |
 |  ggeettffiieelldd__aanndd__vvaall(self, attr)
 |
 |  ggeettffiieellddvvaall(self, attr)
 |
 |  ggeettllaayyeerr(self, cls, nb=1, _track=None, _subclass=None, **flt)
 |      Return the nb^th layer that is an instance of cls, matching flt
 |      values.
 |
 |  gguueessss__ppaayyllooaadd__ccllaassss(self, payload)
 |      DEV: Guesses the next payload class from layer bonds.
 |      Can be overloaded to use a different mechanism.
 |
 |      :param str payload: the layer's payload
 |      :return: the payload class
 |
 |  hhaassllaayyeerr(self, cls, _subclass=None)
 |      true if self has a layer that is an instance of cls.
 |      Superseded by "cls in self" syntax.
 |
 |  hhiiddee__ddeeffaauullttss(self)
 |      Removes fields' values that are the same as default values.
 |
 |  iinniitt__ffiieellddss(self, for_dissect_only=False)
 |      Initialize each fields of the fields_desc dict
 |
 |  iitteerrppaayyllooaaddss(self)
 |      Used to iter through the payloads of a Packet.
 |      Useful for DNS or 802.11 for instance.
 |
 |  jjssoonn(self)
 |      Returns a JSON representing the packet.
 |
 |      Please note that this cannot be used for bijective usage: data loss WILL occur,
 |      so it will not make sense to try to rebuild the packet from the output.
 |      This must only be used for a grepping/displaying purpose.
 |
 |  llaassttllaayyeerr(self, layer=None)
 |      Returns the uppest layer of the packet
 |
 |  llaayyeerrss(self)
 |      returns a list of layer classes (including subclasses) in this packet
 |
 |  ppoosstt__ddiisssseecctt(self, s)
 |      DEV: is called right after the current layer has been dissected
 |
 |  ppoosstt__ddiisssseeccttiioonn(self, pkt)
 |      DEV: is called after the dissection of the whole packet
 |
 |  pprree__ddiisssseecctt(self, s)
 |      DEV: is called right before the current layer is dissected
 |
 |  pprreeppaarree__ccaacchheedd__ffiieellddss(self, flist)
 |      Prepare the cached fields of the fields_desc dict
 |
 |  rreemmoovvee__ppaarreenntt(self, other)
 |      Remove packet parent.
 |      When packet is an element in PacketListField, parent field would
 |      point to the list owner packet.
 |
 |  rreemmoovvee__ppaayyllooaadd(self)
 |
 |  rreemmoovvee__uunnddeerrllaayyeerr(self, other)
 |
 |  rroouuttee(self)
 |
 |  sseellff__bbuuiilldd(self)
 |      Create the default layer regarding fields_desc dict
 |
 |      :param field_pos_list:
 |
 |  sseettffiieellddvvaall(self, attr, val)
 |
 |  sshhooww(self, dump=False, indent=3, lvl='', label_lvl='')
 |      Prints or returns (when "dump" is true) a hierarchical view of the
 |      packet.
 |
 |      :param dump: determine if it prints or returns the string value
 |      :param int indent: the size of indentation for each layer
 |      :param str lvl: additional information about the layer lvl
 |      :param str label_lvl: additional information about the layer fields
 |      :return: return a hierarchical view if dump, else print it
 |
 |  sshhooww22(self, dump=False, indent=3, lvl='', label_lvl='')
 |      Prints or returns (when "dump" is true) a hierarchical view of an
 |      assembled version of the packet, so that automatic fields are
 |      calculated (checksums, etc.)
 |
 |      :param dump: determine if it prints or returns the string value
 |      :param int indent: the size of indentation for each layer
 |      :param str lvl: additional information about the layer lvl
 |      :param str label_lvl: additional information about the layer fields
 |      :return: return a hierarchical view if dump, else print it
 |
 |  sspprriinnttff(self, fmt, relax=1)
 |      sprintf(format, [relax=1]) -> str
 |
 |      Where format is a string that can include directives. A directive
 |      begins and ends by % and has the following format:
 |      ``%[fmt[r],][cls[:nb].]field%``
 |
 |      :param fmt: is a classic printf directive, "r" can be appended for raw
 |        substitution:
 |        (ex: IP.flags=0x18 instead of SA), nb is the number of the layer
 |        (ex: for IP/IP packets, IP:2.src is the src of the upper IP layer).
 |        Special case : "%.time%" is the creation time.
 |        Ex::
 |
 |          p.sprintf(
 |            "%.time% %-15s,IP.src% -> %-15s,IP.dst% %IP.chksum% "
 |            "%03xr,IP.proto% %r,TCP.flags%"
 |          )
 |
 |        Moreover, the format string can include conditional statements. A
 |        conditional statement looks like : {layer:string} where layer is a
 |        layer name, and string is the string to insert in place of the
 |        condition if it is true, i.e. if layer is present. If layer is
 |        preceded by a "!", the result is inverted. Conditions can be
 |        imbricated. A valid statement can be::
 |
 |          p.sprintf("This is a{TCP: TCP}{UDP: UDP}{ICMP:n ICMP} packet")
 |          p.sprintf("{IP:%IP.dst% {ICMP:%ICMP.type%}{TCP:%TCP.dport%}}")
 |
 |        A side effect is that, to obtain "{" and "}" characters, you must use
 |        "%(" and "%)".
 |
 |  ssuummmmaarryy(self, intern=0)
 |      Prints a one line summary of a packet.
 |
 |  ----------------------------------------------------------------------
 |  Class methods inherited from scapy.packet.Packet:
 |
 |  ffrroomm__hheexxccaapp()
 |
 |  lloowweerr__bboonnddss()
 |
 |  uuppppeerr__bboonnddss()
 |
 |  ----------------------------------------------------------------------
 |  Data descriptors inherited from scapy.packet.Packet:
 |
 |  ____ddiicctt____
 |      dictionary for instance variables
 |
 |  ____wweeaakkrreeff____
 |      list of weak references to the object
 |
 |  ccoommmmeenntt
 |
 |  ddeeffaauulltt__ffiieellddss
 |
 |  ddiirreeccttiioonn
 |
 |  eexxpplliicciitt
 |
 |  ffiieellddss
 |
 |  ffiieellddttyyppee
 |
 |  nnaammee
 |
 |  oorriiggiinnaall
 |
 |  oovveerrllooaadd__ffiieellddss
 |
 |  oovveerrllooaaddeedd__ffiieellddss
 |
 |  ppaacckkeettffiieellddss
 |
 |  ppaarreenntt
 |
 |  ppaayyllooaadd
 |
 |  ppoosstt__ttrraannssffoorrmmss
 |
 |  pprroocceessss__iinnffoorrmmaattiioonn
 |
 |  rraaww__ppaacckkeett__ccaacchhee
 |
 |  rraaww__ppaacckkeett__ccaacchhee__ffiieellddss
 |
 |  sseenntt__ttiimmee
 |
 |  ssnniiffffeedd__oonn
 |
 |  ssttoopp__ddiisssseeccttiioonn__aafftteerr
 |
 |  ttiimmee
 |
 |  uunnddeerrllaayyeerr
 |
 |  wwiirreelleenn
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from scapy.packet.Packet:
 |
 |  ____hhaasshh____ = None
 |
 |  ccllaassss__ddeeffaauulltt__ffiieellddss = {<class 'scapy.arch.linux.rtnetlink.rtmsghdr'>:...
 |
 |  ccllaassss__ddeeffaauulltt__ffiieellddss__rreeff = {<class 'scapy.arch.linux.rtnetlink.rtmsghd...
 |
 |  ccllaassss__ddoonntt__ccaacchhee = {<class 'scapy.layers.ntlm.AV_PAIR'>: True, <class ...
 |
 |  ccllaassss__ffiieellddttyyppee = {<class 'scapy.arch.linux.rtnetlink.rtmsghdr'>: {'nl...
 |
 |  ccllaassss__ppaacckkeettffiieellddss = {<class 'scapy.arch.linux.rtnetlink.rtmsghdr'>: [...
 |
 |  ddeepprreeccaatteedd__ffiieellddss = {}
 |
 |  mmaattcchh__ssuubbccllaassss = False
 |
 |  sshhooww__iinnddeenntt = 1
 |
 |  sshhooww__ssuummmmaarryy = True
 |
 |  ----------------------------------------------------------------------
 |  Data and other attributes inherited from scapy.base_classes.BasePacket:
 |
 |  ____oorriigg__bbaasseess____ = (scapy.base_classes.Gen[ForwardRef('Packet')],)
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from scapy.base_classes.Gen:
 |
 |  ____iitteerrlleenn____(self)
 |
 |  ----------------------------------------------------------------------
 |  Class methods inherited from typing.Generic:
 |
 |  ____ccllaassss__ggeettiitteemm____(...)
 |      Parameterizes a generic class.
 |
 |      At least, parameterizing a generic class is the *main* thing this
 |      method does. For example, for some generic class `Foo`, this is called
 |      when we do `Foo[int]` - there, with `cls=Foo` and `params=int`.
 |
 |      However, note that this method is also called when defining generic
 |      classes in the first place with `class Foo[T]: ...`.
 |
 |  ____iinniitt__ssuubbccllaassss____(...)
 |      Function to initialize subclasses.
 |
 |  ----------------------------------------------------------------------
 |  Methods inherited from scapy.base_classes._CanvasDumpExtended:
 |
 |  ppddffdduummpp(self, filename=None, **kargs)
 |      pdfdump(filename=None, layer_shift=0, rebuild=1)
 |
 |      Creates a PDF file describing a packet. If filename is not provided a
 |      temporary file is created and xpdf is called.
 |
 |      :param filename: the file's filename
 |
 |  ppssdduummpp(self, filename=None, **kargs)
 |      psdump(filename=None, layer_shift=0, rebuild=1)
 |
 |      Creates an EPS file describing a packet. If filename is not provided a
 |      temporary file is created and gs is called.
 |
 |      :param filename: the file's filename
 |
 |  ssvvggdduummpp(self, filename=None, **kargs)
 |      svgdump(filename=None, layer_shift=0, rebuild=1)
 |
 |      Creates an SVG file describing a packet. If filename is not provided a
 |      temporary file is created and gs is called.
 |
 |      :param filename: the file's filename
